- parent = "" if not defined?(parent)
- if object.kind_of(Array)
  - object.each do |i|
    = render :partial => "recursive_hash_tabler", :locals => { :object => i, :parent => parent }
- elsif
  %table{:class => table_styles} / parent: #{parent}
    - object.each_pair do |k,v|
      - if v.kind_of?(Hash)
        %tr
          %td= k
          %td= render :partial => "recursive_hash_tabler", :locals => { :object => v, :parent => parent_setter(k,parent) } unless v.blank?
      - elsif v.kind_of?(Array)
        %tr
          %td= k
          %td
            - v.each do |i|
              - if i.kind_of?(Hash)
                = render :partial => "recursive_hash_tabler", :locals => { :object => i, :parent => parent_setter(k, parent) } unless i.blank?
      - else
        %tr{ :class => importantize(k, v) }
          %td= k
          %td
            - if defined?(parent)
              = linkify(k,v,parent)
            - else
              = linkify(k,v)
- else
  = object
